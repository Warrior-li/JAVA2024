The aim of this assignment is to build a versatile game engine that it is able to play _any_ text adventure game
(providing that it conforms to certain rules). To support this versatility, two configuration files:
**entities** and **actions** are used to describe the various "things" that are present in the game,
their structural layout and their dynamic behaviours.
These two configuration files are passed into the game server as parameters to the constructor method like so:

``` java
public GameServer(File entitiesFile, File actionsFile)
```

The server will load the game scenario in from the two configuration files, thus allowing a range of different games to be played.
During the marking process, we will use some custom game files in order to explore the full range of functionality in your code.
It is therefore essential that your game engine allows these files to be passed in and then reads and interprets their content
(otherwise we won't be able to test your code).

Once the configuration files have been loaded, your server will listen for incoming connections from clients (in a similar way to the DB exercise).
Again, the basic network operation has been provided for you in the template class. You will however need to add code to the `handleCommand` method
so that it will:
- receive an incoming command from a client
- process the actions that have been requested
- make changes to any game state that are required
- finally send a suitable response message back to the client

As with the DB assignment, you should build a robust and resilient server which will be able to keep running, no matter what commands the user throws at it.
Note that _unlike_ the DB assignment however, game state must NOT be made persistent between server invocations.
When the server starts up, the game state should be loaded in from the _original_ config files (do NOT update these with changes as the game progresses).
The server should NOT remember the state of any previous games, but should start afresh each time the server is run.

As with the DB exercise, a client has been provided for you for manual testing purposes.
It is again essential that you do not implement any features inside the client class (since this file will be discarded and
replaced by an automated test script during the marking process).

To execute the server from the command line, type `mvnw exec:java@server`.
To execute the client that will connect to the server, open up a NEW terminal window and type `mvnw exec:java@client -Dexec.args="simon"`
The `-Dexec.args` flag allows us to pass an argument into the client (in this case the username of the current player).

This username is then passed by the client to the server at the start of each command (so the server knows which player the command came from).
The client is provided for manual exploration and demonstration purposes - most of the time you will run your code
using a JUnit test script using `mvnw test` (or the green "run test" button from inside IntelliJ).

The video linked to at the top of this section provides a demonstration of a typical game session (from the perspective of the client).
Note that there is no audio track in this video - it is just a visual illustration.


